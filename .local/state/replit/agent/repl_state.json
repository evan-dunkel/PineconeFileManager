{"repl_description":"An advanced AI-powered file management system that intelligently processes, indexes, and synchronizes files using cutting-edge technologies.\n\nCore Technologies:\n- Flask backend with intelligent file processing\n- Pinecone serverless vector database for smart indexing\n- OpenAI vectorization for advanced document analysis\n- Responsive UI with dynamic file interaction capabilities\n- Real-time file synchronization with adaptive tracking\n- Robust error handling and preview functionality\n\nRecent Improvements:\n- Enhanced progress bar and loading indication for file uploads\n- Improved UI spacing and element sizing\n- Refined file preview and interaction mechanisms","repl_description_state":"DESCRIPTION_APPROVED","repl_stack":"FLASK_VANILLA_JS","stack_rules":{"name":"flask_website","display_name":"Flask Website","tarball":null,"directory_structure":null,"description":"Guidelines for successful flask projects, use them as applicable. 1. Listen on port 5000 when starting a server. 2. Use urllib.parse for urlparse. 3. When using werkzeug.security generate_password_hash, omit the method argument and use the default. 4. NEVER hard-code a foreign key such as user_id for simplicity. It may violate a FK constraint. 5. Avoid using JSON-based APIs and client-side JavaScript that use fetch calls in general. Exceptions can be made for maps, charts and other types of specialized client-side rendering. 6. Favor creating web applications unless explicitly stated otherwise. 7. Asset Management:\n  - Prioritize SVG format for vector graphics.\n    - Utilize libraries for icons, images, and other assets:\n      - JavaScript (framework-agnostic):\n        - Icons: Feather Icons, Font Awesome\n        - UI Components: Bootstrap\n        - Image Manipulation: Fabric.js, Two.js\n        - Charts: Chart.js, D3.js\n        - Audio: tone-js\n9. Debug mode for Flask is enabled, use logging.basicConfig(level=logging.DEBUG) to make debugging easier.\n","pre_match_rules":null,"files":[{"file_name":"app.py","content":"import os\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\ndb = SQLAlchemy(model_class=Base)\n# create the app\napp = Flask(__name__)\n# setup a secret key, required by sessions\napp.secret_key = os.environ.get(\"FLASK_SECRET_KEY\") or \"a secret key\"\n# configure the database, relative to the app instance folder\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n# initialize the app with the extension, flask-sqlalchemy >= 3.0.x\ndb.init_app(app)\n\nwith app.app_context():\n    # Make sure to import the models here or their tables won't be created\n    import models  # noqa: F401\n\n    db.create_all()\n"},{"file_name":"main.py","content":"from app import app\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n"},{"file_name":"models.py","content":"from app import db\nfrom flask_login import UserMixin\n\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    # ensure password hash field has length of at least 256\n    password_hash = db.Column(db.String(256))\n"}],"setup_steps":[{"description":"Install Flask, SQLAlchemy, psycopg2","tool":"packager_install_tool","args":{"programming_language":"python","dependency_list":["flask","flask-sqlalchemy","psycopg2","email_validator"]}},{"description":"seed the secret key for sessions","tool":"seed_secret_tool","args":{"key":"FLASK_SECRET_KEY"}},{"description":"Set up the deployment configuration","tool":"deploy_config_tool","args":{"deployment_target":"autoscale","run":["python","main.py"]}}],"compatible_selected_stacks":["FLASK_VANILLA_JS"],"questions":[],"secrets":[],"category":"stack","flag":null}}